//
// src/webql.h
// (Header automatically generated by the ispc compiler.)
// DO NOT EDIT THIS FILE.
//

#pragma once
#include <stdint.h>



#ifdef __cplusplus
namespace ispc { /* namespace */
#endif // __cplusplus

#ifndef __ISPC_ALIGN__
#if defined(__clang__) || !defined(_MSC_VER)
// Clang, GCC, ICC
#define __ISPC_ALIGN__(s) __attribute__((aligned(s)))
#define __ISPC_ALIGNED_STRUCT__(s) struct __ISPC_ALIGN__(s)
#else
// Visual Studio
#define __ISPC_ALIGN__(s) __declspec(align(s))
#define __ISPC_ALIGNED_STRUCT__(s) __ISPC_ALIGN__(s) struct
#endif
#endif


///////////////////////////////////////////////////////////////////////////
// Functions exported from ispc code
///////////////////////////////////////////////////////////////////////////
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
extern "C" {
#endif // __cplusplus
    extern void asymmetric_mad(float * data, uint8_t * mask, uint32_t size, float median, int64_t &count, float &mad, int64_t &countP, float &madP, int64_t &countN, float &madN);
    extern float calculate_radial_spectrumBF32(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t cx, int32_t cy, int32_t r2, bool average, float cdelt3);
    extern float calculate_radial_spectrumF16(uint16_t * src, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t dx, int32_t dy, int32_t cx, int32_t cy, int32_t r2, bool average, float cdelt3);
    extern float calculate_radial_spectrumLF32(float * src, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, int32_t cx, int32_t cy, int32_t r2, bool average, float cdelt3);
    extern float calculate_square_spectrumBF32(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, bool average, float cdelt3);
    extern float calculate_square_spectrumF16(uint16_t * src, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, bool average, float cdelt3);
    extern float calculate_square_spectrumLF32(float * src, float bzero, float bscale, float ignrval, float datamin, float datamax, uint32_t width, int32_t x1, int32_t x2, int32_t y1, int32_t y2, bool average, float cdelt3);
    extern void copy_mirror_float32(float * src, float * dst, int32_t width, int32_t height);
    extern void f16tof32(uint16_t * src, float * dst, float frame_min, float frame_max, float min16, float max16, uint32_t size);
    extern void f32PIXMtof16(float * pixels, uint8_t * mask, int32_t src_x, int32_t src_y, uint32_t width, uint32_t height, uint16_t * dst, uint32_t size, float frame_min, float frame_max, float min16, float max16);
    extern void f32tof16(float * src, uint16_t * dst, float frame_min, float frame_max, float min16, float max16, uint32_t size);
    extern void fits2float32(int32_t * src, uint8_t * mask, float bzero, float bscale, float ignrval, float datamin, float datamax, float &rmin, float &rmax, uint32_t size);
    extern void histogram(float * data, uint32_t size, uint32_t * hist, int32_t nbins, float pmin, float pmax);
    extern void image_min_max(float * pixels, uint8_t * mask, float cdelt3, uint32_t size, float &rmin, float &rmax);
    extern void image_to_luminance_f32_linear(float * cubeData, uint8_t * mask, float black, float slope, uint8_t * pixels, uint32_t total_size);
    extern void image_to_luminance_f32_logarithmic(float * cubeData, uint8_t * mask, float dmin, float dmax, float lmin, float lmax, uint8_t * pixels, uint32_t total_size);
    extern void image_to_luminance_f32_logarithmic_inplace(float * cubeData, uint8_t * mask, float dmin, float dmax, float lmin, float lmax, uint32_t total_size);
    extern void image_to_luminance_f32_logistic(float * cubeData, uint8_t * mask, float median, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void image_to_luminance_f32_ratio(float * cubeData, uint8_t * mask, float black, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void image_to_luminance_f32_square(float * cubeData, uint8_t * mask, float black, float sensitivity, uint8_t * pixels, uint32_t total_size);
    extern void join_pixels_masks(float * pixels, float * pixels_tid, uint8_t * mask, uint8_t * mask_tid, uint32_t size);
    extern void make_image_spectrumF16(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, float cdelt3, float * dst_pixels, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float &mean, float &integrated);
    extern void make_image_spectrumF32(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, float cdelt3, float * dst_pixels, uint8_t * dst_mask, float &frame_min, float &frame_max, float &mean, float &integrated, uint32_t total_size);
    extern void make_image_spectrumF32_ro(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, float cdelt3, float * dst_pixels, uint8_t * dst_mask, float &frame_min, float &frame_max, float &mean, float &integrated, uint32_t total_size);
    extern void make_planeF32(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, float * dst_pixels, uint8_t * dst_mask, uint32_t total_size);
    extern void make_video_frameF16(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, float * dst_pixels, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe);
    extern void make_video_frameF16_legacy(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint8_t * dst_luma, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float dmin, float dmax, float lmin, float lmax);
    extern void make_video_frameF16_linear(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint8_t * dst_luma, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float black, float slope);
    extern void make_video_frameF16_logistic(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint8_t * dst_luma, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float median, float sensitivity);
    extern void make_video_frameF16_ratio(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint8_t * dst_luma, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float black, float sensitivity);
    extern void make_video_frameF16_square(uint16_t * src, int32_t dx, int32_t dy, int32_t src_stripe, float frame_min, float frame_max, float min16, float max16, float bzero, float bscale, float ignrval, float datamin, float datamax, uint8_t * dst_luma, uint8_t * dst_mask, int32_t offset_x, int32_t offset_y, int32_t dst_stripe, float black, float sensitivity);
    extern void make_video_frameF32(int32_t * src, float bzero, float bscale, float ignrval, float datamin, float datamax, float * dst_pixels, uint8_t * dst_mask, uint32_t total_size);
    extern void mirror_float32(float * image, int32_t width, int32_t height);
    extern void mirror_u8(uint8_t * image, int32_t width, int32_t height);
    extern void nan_mask(float * buffer, uint8_t * mask, uint32_t size);
    extern float pixels_mean_brightness_ratio(float * pixels, uint8_t * mask, float black, float sensitivity, uint32_t total_size);
#if defined(__cplusplus) && (! defined(__ISPC_NO_EXTERN_C) || !__ISPC_NO_EXTERN_C )
} /* end extern C */
#endif // __cplusplus


#ifdef __cplusplus
} /* namespace */
#endif // __cplusplus
